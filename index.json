{
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | DotEnv.Core",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions"
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCustomEnv.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCustomEnv.html",
    "title": "Method AddCustomEnv | DotEnv.Core",
    "keywords": "Method AddCustomEnv | Improve this Doc View Source AddCustomEnv(IServiceCollection, String, String) Adds the environment vars based on the environment (development, test, staging or production). This registers IEnvReader as a singleton and calls the LoadEnv() method. Declaration public static IEnvReader AddCustomEnv(this IServiceCollection services, string basePath = null, string environmentName = null) Parameters Type Name Description IServiceCollection services The service collection. String basePath The base path where the .env files will be located. String environmentName The name of the environment. Returns Type Description IEnvReader An instance that allows access to the environment variables. Exceptions Type Condition ArgumentNullException services is null . | Improve this Doc View Source AddCustomEnv<TSettings>(IServiceCollection, String, String) Adds the environment vars based on the environment (development, test, staging or production). This registers TSettings as a singleton and calls the LoadEnv() method. Declaration public static TSettings AddCustomEnv<TSettings>(this IServiceCollection services, string basePath = null, string environmentName = null) where TSettings : class, new() Parameters Type Name Description IServiceCollection services The service collection. String basePath The base path where the .env files will be located. String environmentName The name of the environment. Returns Type Description TSettings An instance that allows access to the environment variables. Type Parameters Name Description TSettings The type of the new instance to bind. Exceptions Type Condition ArgumentNullException services is null ."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddDotEnv.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddDotEnv.html",
    "title": "Method AddDotEnv | DotEnv.Core",
    "keywords": "Method AddDotEnv | Improve this Doc View Source AddDotEnv(IServiceCollection) Adds the environment vars using a service. This registers IEnvReader as a singleton and calls the Load() method. Declaration public static IEnvReader AddDotEnv(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The service collection. Returns Type Description IEnvReader An instance that allows access to the environment variables. Exceptions Type Condition ArgumentNullException services is null . | Improve this Doc View Source AddDotEnv(IServiceCollection, String[]) Adds the environment vars using a service. This registers IEnvReader as a singleton and calls the Load() method. Declaration public static IEnvReader AddDotEnv(this IServiceCollection services, params string[] paths) Parameters Type Name Description IServiceCollection services The service collection. String [] paths The .env files paths to add. Returns Type Description IEnvReader An instance that allows access to the environment variables. Exceptions Type Condition ArgumentNullException services , or paths is null . ArgumentException The length of the paths list is zero. | Improve this Doc View Source AddDotEnv<TSettings>(IServiceCollection) Adds the environment vars using a service. This registers TSettings as a singleton and calls the Load() method. Declaration public static TSettings AddDotEnv<TSettings>(this IServiceCollection services) where TSettings : class, new() Parameters Type Name Description IServiceCollection services The service collection. Returns Type Description TSettings An instance that allows access to the environment variables. Type Parameters Name Description TSettings The type of the new instance to bind. Exceptions Type Condition ArgumentNullException services is null . | Improve this Doc View Source AddDotEnv<TSettings>(IServiceCollection, String[]) Adds the environment vars using a service. This registers TSettings as a singleton and calls the Load() method. Declaration public static TSettings AddDotEnv<TSettings>(this IServiceCollection services, params string[] paths) where TSettings : class, new() Parameters Type Name Description IServiceCollection services The service collection. String [] paths The .env files paths to add. Returns Type Description TSettings An instance that allows access to the environment variables. Type Parameters Name Description TSettings The type of the new instance to bind. Exceptions Type Condition ArgumentNullException services , or paths is null . ArgumentException The length of the paths list is zero."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DotEnv.Core",
    "keywords": "Class ServiceCollectionExtensions Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : DotEnv.Core.Extensions.Microsoft.DependencyInjection.dll Syntax public static class ServiceCollectionExtensions Methods Name Description AddCustomEnv(IServiceCollection, String, String) Adds the environment vars based on the environment (development, test, staging or production). This registers IEnvReader as a singleton and calls the LoadEnv() method. AddCustomEnv<TSettings>(IServiceCollection, String, String) Adds the environment vars based on the environment (development, test, staging or production). This registers TSettings as a singleton and calls the LoadEnv() method. AddDotEnv(IServiceCollection) Adds the environment vars using a service. This registers IEnvReader as a singleton and calls the Load() method. AddDotEnv(IServiceCollection, String[]) Adds the environment vars using a service. This registers IEnvReader as a singleton and calls the Load() method. AddDotEnv<TSettings>(IServiceCollection) Adds the environment vars using a service. This registers TSettings as a singleton and calls the Load() method. AddDotEnv<TSettings>(IServiceCollection, String[]) Adds the environment vars using a service. This registers TSettings as a singleton and calls the Load() method."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | DotEnv.Core",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "dotenv.core extensions for Microsoft.Extensions.DependencyInjection | DotEnv.Core",
    "keywords": "dotenv.core extensions for Microsoft.Extensions.DependencyInjection This library adds extension methods for the Microsoft.Extensions.DependencyInjection package, which can be accessed through the IServiceCollection interface. So, this library is just a wrapper and behind the scenes what happens is that it uses the classes and methods from the dotenv.core project. This project was created to add support for DI and can be used in ASP.NET Core projects. Don't forget to visit the library website where you can find API documentation . Advantages The advantages of using this wrapper are: No need to manually call the EnvLoader.Load method to set the environment variables from the .env file. No need to manually call the EnvBinder.Bind method to map the keys of the .env file with the model properties. No need to manually register the service as a singleton: IEnvReader or AppSettings . Installation If you're want to install the package from Visual Studio, you must open the project/solution in Visual Studio, and open the console using the Tools > NuGet Package Manager > Package Manager Console command and run the install command: Install-Package Dotenv.Extensions.Microsoft.DependencyInjection If you are making use of the dotnet CLI, then run the following in your terminal: dotnet add package Dotenv.Extensions.Microsoft.DependencyInjection Usage You only need to invoke the AddDotEnv method to add the environment vars using a service: // Example in ASP.NET Core 6+ var builder = WebApplication.CreateBuilder(args); // Add services to the container. IServiceCollection services = builder.Services; services.AddDotEnv<AppSettings>(); var app = builder.Build(); The following line of code: services.AddDotEnv<AppSettings>(); It does several things: Invokes the Load method of the EnvLoader class to set the environment variables from a file named .env . Invokes the Bind method of the EnvBinder class to map the keys of the .env file with the AppSettings properties. Registers AppSettings as a singleton for the DI container. Subsequently, the configuration class can be used in the controllers and the DI container will take care of injecting the instance when necessary: public class ExampleController : ControllerBase { private readonly AppSettings _settings; public ExampleController(AppSettings settings) { _settings = settings; } } Note: You can also take a look at the source code of the example project. Contribution Follow the steps below: Fork it Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Added some feature') Push to the branch (git push origin my-new-feature) Create new Pull Request"
  }
}